import argparse
import random
import sys
import time
import requests

from bodies import return_body_for_endpoint


def in_range(value, min_max):
    return min_max[0] <= value <= min_max[1]


def http_requests():
    """
    main loop for normal behaviour
    """
    while True:
        try:
            sys.stdin.readline()
            random_choice = random.randint(1, 100)

            if in_range(random_choice, post_probability):
                do_post()
            elif in_range(random_choice, get_probability):
                do_get()

        # handling victim shutdown before own shutdown
        except Exception as e:
            time.sleep(5)


def do_post():
    """
    executes POST request to victim
    """
    server_post_paths = [
        '/profiles/',
        '/campaigns/',
        '/rules/',
        '/profiles/sessions/' + str(random.choice(range(10)))
    ]
    endpoint = random.choice(server_post_paths)
    url = ''.join(['http://', args.server_ip, endpoint])
    auth = ('karaf', 'karaf')

    body = return_body_for_endpoint(endpoint)

    print(' '.join(['POST:', url]))
    # print('BODY: ' + str(body))

    r = requests.post(url=url, auth=auth, json=body)


def do_get():
    """
    executes GET request to victim
    """
    server_get_paths = [
        '/profiles/' + str(random.randint(0, 9)),
        '/profiles/' + str(random.randint(0, 9)) + '/sessions',
        '/campaigns/',
        '/userList/',
        '/rules/',
        '/rules/statistics/'
    ]

    url = ''.join(['http://', args.server_ip, random.choice(server_get_paths)])
    auth = ('karaf', 'karaf')
    requests.get(url=url, auth=auth)

    print(' '.join(['GET:', url]))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='HTTPS-Client Simulation.')

    parser.add_argument('-ip', dest='server_ip', action='store', type=str, required=True,
                        help='The IP address of the target server')
    args = parser.parse_args()

    # appending the apache unomi port
    args.server_ip = args.server_ip + ':8181/cxs'

    # probabilities
    post_probability = [1, 50]
    get_probability = [51, 100]

    http_requests()
