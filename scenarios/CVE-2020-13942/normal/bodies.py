import names
import random
import datetime

profile = {
    "itemId": random.choice(range(10)),
    "itemType": "profile",
    "version": None,
    "properties": {
        "firstName": names.get_first_name(),
        "lastName": names.get_last_name(),
        "annualIncome": 10000
    },
    "systemProperties": {},
    "segments": [],
    "scores": {},
    "mergedWith": None,
    "consents": {}
}

campaign_old = {
    "version": None,
    "itemId": random.choice(range(10)),
    "itemType": "profile",
    "metadata": {
        "readOnly": False,
        "name": names.get_last_name(),
        "missingPlugins": False,
        "hidden": False,
        "id": random.choice(range(10)),
        "scope": "aa",
        "enabled": True,
        "description": "dd",
        "tags": [''],
        "systemTags": ['']
    },
    "startDate": str(datetime.datetime.today())[0:10],
    "endDate": str(datetime.datetime.today() + datetime.timedelta(days=7))[0:10],
    "entryCondition": {
        "type": "ab",
        "parameterValues": {}
    },
    "cost": None,
    "primaryGoal": "ac",
    "timezone": "CET",
    "currency": "EUR"
}

campaign = {
    "itemId": "firstCampaignExample",
    "itemType": "campaign",
    "startDate": str(datetime.datetime.today())[0:10],
    "endDate": str(datetime.datetime.today() + datetime.timedelta(days=7))[0:10],
    "entryCondition": {
        "parameterValues": {
            "subConditions": [
                {
                    "parameterValues": {
                        "propertyName": "duration",
                        "comparisonOperator": "lessThanOrEqualTo",
                        "propertyValueInteger": 3000
                    },
                    "type": "sessionPropertyCondition"
                },
                {
                    "parameterValues": {
                        "pagePath": "/sites/digitall/home/about"
                    },
                    "type": "pageViewEventCondition"
                }
            ],
            "operator": "and"
        },
        "type": "booleanCondition"
    },
    "cost": 1000000,
    "currency": "USD",
    "primaryGoal": "downloadGoalExample",
    "timezone": "Europe/Zurich",
    "metadata": {
        "id": "firstCampaignExample",
        "name": "firstCampaign",
        "description": "Example of a campaign",
        "scope": "digitall",
        "tags": [],
        "systemTags": [
            "landing",
            "campaign"
        ],
        "enabled": True,
        "missingPlugins": False,
        "hidden": False,
        "readOnly": False
    }
}

rule = {
    "metadata": {
        "id": "eligibilityRule",
        "name": "Example eligibility rule",
        "description": "Profile annualIncome < 12000"
    },
    "condition": {
        "parameterValues": {
            "subConditions": [
                {
                    "parameterValues": {
                        "propertyName": "properties.annualIncome",
                        "comparisonOperator": "greaterThan",
                        "propertyValueInt": 12000
                    },
                    "type": "profilePropertyCondition"
                },
                {
                    "type": "profileUpdatedEventCondition",
                    "parameterValues": {
                    }
                }
            ],
            "operator": "and"
        },
        "type": "booleanCondition"
    },
    "actions": [
        {
            "parameterValues": {
                "setPropertyName": "properties.eligibility",
                "setPropertyValue": "yes"
            },
            "type": "setPropertyAction"
        }
    ]
}

session = {
    "itemId": "",
    "itemType": "session",
    "scope": None,
    "version": 1,
    "profileId": 10,
    "profile": profile,
    "properties": {},
    "systemProperties": {},
    "timeStamp": datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%SZ")
}


# endpoint-body mapping
def return_body_for_endpoint(endpoint):
    if endpoint == '/profiles/':
        return profile
    elif endpoint == '/campaigns/':
        return campaign
    elif endpoint == '/rules/':
        return rule
    elif '/profiles/sessions/' in endpoint:
        session['itemId'] = endpoint[19:]
        return session
