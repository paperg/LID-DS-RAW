import sys
import time
import uuid
import string
import random
import argparse
import requests
from bs4 import BeautifulSoup


def vprint(string):
    """
    prints the given string if the verbose flag is set
    """
    if args.verbose:
        print(string)


def http_requests(url):
    """
    main loop for normal behaviour
    """
    # probabilities
    while True:
        try:
            sys.stdin.readline()
            random_choice = random.randint(1, 100)

            if random_choice <= 50:
                upload_file(url)
            else:
                download_file(url)

        except Exception as e:
            vprint("Error")
            vprint(e)
            time.sleep(5)


def upload_file(url):
    """
    execute POST request to victim
    upload file with name generated with uuid
    """
    file_path = '/home/upload_files/file.txt'
    upload_amount = random.randint(0, 4)
    for i in range(upload_amount):
        # write random strings in file
        tokens = unique_strings(k=random.randint(1, 10),
                                ntokens=random.randint(1, 10))
        with open(file_path, 'w') as f:
            for token in tokens:
                f.write(token)
        # upload file
        with open(file_path, 'rb') as f:
            requests.post(
                url,
                files={"file": (str(uuid.uuid4().hex), f)}
            )
    vprint(f"Uploaded {upload_amount} files")


def download_file(url):
    """
    get list of possible files to download
    go on one of these links and download file
    """
    req = requests.get(url)
    soup = BeautifulSoup(req.text, 'html.parser')
    link_list = []

    href = soup.find_all('a', href=True)
    for j in href:
        link_list.append(j['href'])

    # download len(list) - link_amount files
    if len(link_list) > 0:
        link_amount = random.randint(0, len(link_list)-1)
        for i in range(len(link_list) - link_amount):
            selected_link = random.randint(0, len(link_list)-1)
            req = requests.get(link_list[selected_link])
        vprint(f"Downloaded {len(link_list) - link_amount} files"
               f" - currently {len(link_list)} files to download")
    else:
        vprint("No uploads yet - not downloading")


def unique_strings(k: int,
                   ntokens: int,
                   pool: str = string.ascii_letters) -> set:
    """Generate a set of unique string tokens.

    k: Length of each token
    ntokens: Number of tokens
    pool: Iterable of characters to choose from
    """
    seen = set()
    # An optimization for tightly-bound loops:
    # Bind these methods outside of a loop
    join = ''.join
    add = seen.add
    while len(seen) < ntokens:
        token = join(random.choices(pool, k=k))
        add(token)
    return seen


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='HTTPS-Client Simulation.')

    parser.add_argument('-ip',
                        dest='server_ip',
                        action='store',
                        type=str,
                        required=True,
                        help='The IP address of the target server')
    parser.add_argument('-v',
                        dest='verbose',
                        action='store',
                        type=bool,
                        required=False,
                        default=False,
                        help='Make the operations more talkative')
    args = parser.parse_args()

    # appending tomcat port
    args.server_ip = args.server_ip + ':8080'
    base_url = f'http://{args.server_ip}/'

    http_requests(base_url)
